<?xml version="1.0"?>
<!-- ======================================================================
	 TestBox Build (www.ortussolutions.com/products/testbox)
	 ====================================================================== -->
<project name="testbox-build" default="build.all" basedir="../">
	<description>
		Build a new distribution of TestBox
	</description>

	<!-- Version: UPDATE ON EACH RELEASE AS NEEDED -->
	<property name="groupID"			value="ortussolutions" />
	<property name="testbox.version"	value="2.8.0"/>
	<property name="testbox.slug"		value="testbox"/>

	<condition property="isTravis" else="false">
      <isset property="isTravis"/>
    </condition>
	<condition property="cfengine" else="lucee@4.5">
      <isset property="cfengine"/>
    </condition>
    <condition property="build.branch" else="development">
      <isset property="build.branch"/>
    </condition>

	<!-- Build Labels -->
	<tstamp prefix="start"/>
	<!-- Load Contrib Tasks -->
	<path id="cp">
		<fileset dir="build/lib">
			<include name="**/*.jar" />
		</fileset>
	</path>
	<!-- Define Tasks -->
	<taskdef resource="net/sf/antcontrib/antlib.xml" classpathref="cp" />
	<!-- Import Box-Repo Tasks -->
	<import><url url="https://raw.githubusercontent.com/Ortus-Solutions/box-tasks/master/box-repo.xml"/></import>

	<!-- Init -->
	<target name="init" description="Init the build" unless="src.isInit">
		<!-- Default environment check, if not passed via -Denvironment -->
		<condition property="environment" value="local">
			<not><isset property="environment" /></not>
		</condition>
		<if>
			<available file="build/build-${environment}.properties" />
			<then>
				<!-- Load env properties -->
				<echo>Loading properties from environment: ${environment}</echo>
				<loadproperties srcFile="build/build-${environment}.properties"/>
			</then>
		</if>
		<!-- Load root properties -->
		<echo>Loading base properties</echo>
		<loadproperties srcFile="build/build.properties"/>

		<!-- Build Number -->
		<if>
			<not><isset property="build.number" /></not>
			<then>
				<propertyfile file="build/build.number" comment="Build Number for ANT. Edit not!">
					<entry key="build.number"
							type="int"
					     	operation="+"
							pattern="00000"
					     	default="1" />
				</propertyfile>

				<property file="build/build.number"/>
			</then>
		</if>

		<!-- Build Label -->
		<property name="build.label" value="testbox-${testbox.version}+${build.number}-${start.DSTAMP}${start.TSTAMP}"/>

		<!-- Cleanup + Init -->
		<delete dir="${dir.build}" />
		<mkdir dir="${dir.build}"/>
		<chmod file="${dir.build}/**" perm="og+wrs" type="both" />
		<!-- Mark as init -->
		<property name="src.isInit" value="true" />

		<!-- Make sure server is stopped -->
		<exec executable="box" dir="${basedir}">
			<arg line="server stop" />
		</exec>
		<!-- Startup the testing server, wait for a few seconds for server to start -->
		<exec executable="box" dir="${basedir}">
			<arg line="server start name=${cfengine} cfengine=${cfengine} heapSize=1024" />
		</exec>
	</target>

	<!-- update permissions on reports -->
	<target name="update.permissions" description="Update staging server permissions">
		<!-- Integration permissions -->
		<if>
			<equals arg1="${environment}" arg2="auto" />
			<then>
				<chmod file="${dir.build}/**" perm="go+wrs" type="both" verbose="true" />
				<chown owner="stg-ortus" verbose="true">
					<fileset dir="${dir.build}" />
				</chown>
			</then>
			<else>
			</else>
		</if>
	</target>

	<!-- Build test reports -->
	<target name="run-tests" depends="init">
		<!-- Execute tests -->
		<exec executable="box" dir="${basedir}" failonerror="true">
			<arg line="testbox run --noVerbose" />
		</exec>
	</target>

	<!-- Build All Releases -->
	<target name="build.all" description="Builds TestBox" depends="run-tests,build.testbox">
		<exec executable="box" dir="${basedir}">
			<arg line="server stop" />
		</exec>
	</target>

	<!-- Build TestBox-->
	<target name="build.testbox" description="Build a new TestBox Distribution" depends="init">
		<!-- prepare dirs -->
		<property name="dir.testbox.exports"	value="${dir.exports}/${testbox.slug}/${testbox.version}" />
		<property name="be.testbox.exports" 	value="${be.exports}/${testbox.slug}" />
		<!-- Update Permissions -->
		<antcall target="update.permissions" />

		<!-- Copy build ID -->
		<concat destfile="${dir.build}/testbox/${build.label}">Built on ${start.TODAY}</concat>

		<!-- Copy SRC to TestBox namespace -->
		<copy todir="${dir.build}/testbox/" encoding="UTF-8">
			<fileset dir=".">
				<exclude name="apidocs/**" />
				<exclude name="artifacts/**" />
				<exclude name="build/**" />
				<exclude name="build-testbox/**" />
				<exclude name="tests/**" />
				<exclude name="cpu.json" />
				<exclude name="box.json" />
				<exclude name="server.json" />
				<exclude name="server-*.json" />
				<exclude name=".*/**" />
				<exclude name="settings.xml" />
			</fileset>
		</copy>

		<!-- Copy box.json -->
		<copy file="box.json" toFile="${dir.build}/testbox/box.json" encoding="UTF-8"/>

		<!-- Copy Samples -->
		<copy todir="${dir.build}/testbox/tests" encoding="UTF-8">
			<fileset dir="tests/">
				<exclude name="results/**" />
			</fileset>
		</copy>

		<!-- Replace Version Number -->
		<replaceregexp match='@build.version@' replace="${testbox.version}" flags="ig" byline="true" encoding="UTF-8">
		  <fileset dir="${dir.build}" />
		</replaceregexp>

		<!-- Determine snapshot vs master artifact -->
		<if>
			<equals arg1="${build.branch}" arg2="development" />
			<then>
				<replaceregexp match='\+@build.number@' replace="-snapshot" flags="ig" byline="true" encoding="UTF-8">
				  <fileset dir="${dir.build}" />
				</replaceregexp>
			</then>
			<else>
				<replaceregexp match='@build.number@' replace="${build.number}" flags="ig" byline="true" encoding="UTF-8">
				  <fileset dir="${dir.build}" />
				</replaceregexp>
			</else>
		</if>

		<!-- Api Docs -->
		<antcall target="build.apidocs" />

		<!-- Zip Bundle -->
		<zip destfile="${dir.testbox.exports}/testbox-${testbox.version}.zip" basedir="${dir.build}" />

		<!-- Build Checksum -->
		<checksum forceoverwrite="true" fileext=".md5">
			<fileset dir="${dir.testbox.exports}">
				<include name="*.zip" />
			</fileset>
		</checksum>
		<checksum forceoverwrite="true" algorithm="SHA-512" fileext=".sha512">
			<fileset dir="${dir.testbox.exports}">
				<include name="*.zip" />
			</fileset>
		</checksum>

		<!-- Copy box.json to exports -->
		<copy file="${dir.build}/testbox/box.json" toFile="${dir.testbox.exports}/box.json" encoding="UTF-8"/>

		<!-- Move Bleeding Edge to Root -->
		<copy file="${dir.testbox.exports}/box.json"
			  toFile="${be.testbox.exports}/box.json"
			  overwrite="true"
			  encoding="UTF-8"/>
		<copy file="${dir.testbox.exports}/testbox-${testbox.version}.zip"
			  tofile="${be.testbox.exports}/${testbox.slug}-be.zip"
			  overwrite="true"
			  encoding="UTF-8"/>
		<copy file="${dir.testbox.exports}/testbox-${testbox.version}.zip.md5"
			  tofile="${be.testbox.exports}/${testbox.slug}-be.zip.md5"
			  overwrite="true"
			  encoding="UTF-8"/>
		<copy file="${dir.testbox.exports}/testbox-${testbox.version}.zip.sha512"
			  tofile="${be.testbox.exports}/${testbox.slug}-be.zip.sha512"
			  overwrite="true"
			  encoding="UTF-8"/>

		<!-- Create Box Repo From macrodef -->
		<box-repo location="${dir.exports}/${testbox.slug}"
				  artifactID="${testbox.slug}"
				  groupID="${groupID}"
				  buildID="${build.number}"
				  latest="${testbox.version}"
				  classifiers="apidocs"/>

	</target>

	<!-- Build API Docs -->
	<target name="build.apidocs" description="Builds the api docs" depends="init">
		<!-- Create API apidocs dir -->
		<mkdir dir="${dir.build}/testbox/apidocs"/>
		<!-- Install dependencies for docs -->
		<exec executable="box" dir="${dir.apidocs}">
			<arg line="install --force" />
		</exec>
		<!-- Get the apidocs now -->
		<get dest="${dir.build}/docbox.html"
			 src="${url.apidocs}?version=${testbox.version}&amp;path=${dir.build}/testbox/apidocs"
			 verbose="true"
			 retries="5"/>
		<delete file="${dir.build}/docbox.html"/>
		<!-- Zip API Docs -->
		<zip destfile="${dir.testbox.exports}/${testbox.slug}-apidocs-${testbox.version}.zip" basedir="${dir.build}/testbox/apidocs"></zip>
	</target>

</project>
