name: TestBox CI

# Only on Development we build snapshots
on:
  push:
    branches:
      - development
      - master

jobs:
  #############################################
  # Tests First baby! We fail, no build :(
  #############################################
  tests:
    name: Tests
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      matrix:
        cfengine: [ "lucee@5", "adobe@2016", "adobe@2018", "adobe@2021" ]
        javaVersion: [ "openjdk8", "openjdk11" ]
        fullNull: ["true", "false"]
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Delete AbstractClass for adobe@2016
        if: contains(matrix.cfengine, 'adobe@2016')
        run: rm tests/specs/AbstractClass.cfc

      - name: Setup Java
        uses: actions/setup-java@v2
        with:
          distribution: "adopt"
          java-version: "11"

      - name: Setup CommandBox
        uses: elpete/setup-commandbox@v1.0.0

      - name: Cache CommandBox Dependencies
        uses: actions/cache@v1
        if: ${{ true }}
        with:
          path: ~/.CommandBox/artifacts
          key: ${{ runner.OS }}-commandbox-cache-${{ hashFiles( 'box.json' ) }}
          restore-keys: |
            ${{ runner.OS }}-commandbox-cache-${{ hashFiles( 'box.json' ) }}

      - name: Install Dependencies
        run: |
          # Core dependencies
          box install --production

      - name: Start ${{ matrix.cfengine }}/${{ matrix.javaVersion }} Server
        run: |
          box server start serverConfigFile="server-${{ matrix.cfengine }}.json" javaVersion=${{ matrix.javaVersion }} --noSaveSettings --debug

      - name: Run Tests
        env:
          FULL_NULL: ${{matrix.fullNull}}
        run: |
          ant -f build/build.xml run-tests

      - name: Publish Test Results
        uses: EnricoMi/publish-unit-test-result-action@v1
        if: always()
        with:
          files: tests/results/**/*.xml
          check_name: "${{ matrix.cfengine }} Test Results"
          summary: true

      - name: Upload Test Results Artifacts
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: testbox-test-results-${{ matrix.cfengine }}
          path: |
            tests/results/**/*

      - name: Slack Notification
        if: ${{ failure() }}
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_CHANNEL: testbox
          SLACK_COLOR: ${{ job.status }} # or a specific color like 'green' or '#ff00ff'
          SLACK_ICON_EMOJI: ":bell:"
          SLACK_MESSAGE: 'TestBox tests failed :cry:, check them out here: https://github.com/Ortus-Solutions/testbox/actions'
          SLACK_TITLE: TestBox Tests For ${{ matrix.cfengine }} failed
          SLACK_USERNAME: CI
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Failure Debugging Info
        if: ${{ failure() }}
        run: |
          box server log serverConfigFile="server-${{ matrix.cfengine }}.json"

      - name: Upload Debugging Info To Artifacts
        if: ${{ failure() }}
        uses: actions/upload-artifact@v2
        with:
          name: Failure Debugging Info - ${{ matrix.cfengine }}
          path: |
            .engine/**/logs/*
            .engine/**/WEB-INF/cfusion/logs/*

  #############################################
  # Build ColdBox Now
  #############################################
  build:
    name: Build & Publish
    needs: tests
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Setup Java
        uses: actions/setup-java@v2
        with:
          distribution: "adopt"
          java-version: "11"

      - name: Cache CommandBox Dependencies
        uses: actions/cache@v1
        if: ${{ true }}
        with:
          path: ~/.CommandBox/artifacts
          key: ${{ runner.OS }}-commandbox-cache-${{ hashFiles( 'box.json' ) }}
          restore-keys: |
            ${{ runner.OS }}-commandbox-cache-${{ hashFiles( 'box.json' ) }}

      - name: Setup CommandBox
        uses: elpete/setup-commandbox@v1.0.0
        with:
          forgeboxAPIKey: ${{ secrets.FORGEBOX_API_TOKEN }}

      - name: Setup Environment Variables For Build Process
        id: current_version
        run: |
          echo "TESTBOX_VERSION=`cat box.json | jq '.version' -r`" >> $GITHUB_ENV
          box package set version=@build.version@+@build.number@
          # master or snapshot
          echo "BRANCH=master" >> $GITHUB_ENV
          if [ $GITHUB_REF == 'refs/heads/development' ]
          then
            echo "BRANCH=development" >> $GITHUB_ENV
          fi

      - name: Install Dependencies
        run: |
          cd apidocs && box install

      - name: Build TestBox for ${{ env.BRANCH }} v${{ env.TESTBOX_VERSION }}
        run: |
          box server start serverConfigFile="server-lucee@5.json"
          ant -Dversion=${{ env.TESTBOX_VERSION }} -Dbuild.branch=${{ env.BRANCH }} -Dbuild.number=${{ github.run_number }} -f build/build.xml

      - name: Upload Build Artifacts
        if: success()
        uses: actions/upload-artifact@v2
        with:
          name: testbox
          path: |
            artifacts/**/*

      - name: Upload Binaries to S3
        uses: jakejarvis/s3-sync-action@master
        with:
          args: --acl public-read
        env:
          AWS_S3_BUCKET: "downloads.ortussolutions.com"
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_ACCESS_SECRET }}
          SOURCE_DIR: "artifacts/testbox"
          DEST_DIR: "ortussolutions/testbox"

      - name: Upload API Docs to S3
        uses: jakejarvis/s3-sync-action@master
        with:
          args: --acl public-read
        env:
          AWS_S3_BUCKET: "apidocs.ortussolutions.com"
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_ACCESS_SECRET }}
          SOURCE_DIR: "build-testbox/testbox/apidocs"
          DEST_DIR: "testbox/${{ env.TESTBOX_VERSION }}"

      - name: Publish
        run: |
          ROOT_DIR=`pwd`
          cd $ROOT_DIR/build-testbox/testbox && box forgebox publish

      - name: Inform Slack
        if: ${{ always() }}
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_CHANNEL: testbox
          SLACK_COLOR: ${{ job.status }} # or a specific color like 'green' or '#ff00ff'
          SLACK_ICON_EMOJI: ":bell:"
          SLACK_MESSAGE: 'TestBox ${{ env.TESTBOX_VERSION }} Built with ${{ job.status }}!'
          SLACK_TITLE: "TestBox Build"
          SLACK_USERNAME: CI
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}