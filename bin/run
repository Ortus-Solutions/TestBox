#!/usr/bin/env boxlang

/**
 * TestBox Runner for BoxLang
 * Options:
 * --test-bundles: A list of test bundles to run, defaults to `*`, ex: `path.to.bundle1,path.to.bundle2`, . Mutually exclusive with `--test-directory`
 * --test-directory : A list of directories to look for tests to execute.  Please use dot-notation not absolute notation.
 * 		Mutually exclusive with `--test-bundles`. Ex: `tests.specs`.  Defaults to `tests.specs`
 * --test-reporter : The reporter to use.
 * --test-reporter-options : The reporter options to use as a JSON struct literal. Ex: `{"verbose"=true}`
 * --test-labels : A list of labels to run, defaults to `*`
 * --test-excludes : A list of labels to exclude, defaults to empty
 * --test-recurse : Recurse into subdirectories, defaults to `true`
 * --test-filter-bundles : A list of bundles to filter by, defaults to `*`
 * --test-filter-suites : A list of suites to filter by, defaults to `*`
 * --test-filter-specs : A list of test names or spec names to filter by, defaults to `*`
 * --test-eager-failure : Fail fast, defaults to `false`
 * --test-runner-options: A JSON struct literal of options to pass into the test runner. Ex: `{"verbose"=true}`
 * --test-verbose : Verbose output, defaults to `false`. This will stream the output of the status of the tests as they run.
 */

// Defaults
DEFAULT_TEST_DIRECTORY = "tests.specs"
DEFAULT_REPORTER = "text"

// CLI variables
rootPath = server.cli.executionPath
options = server.cli.parsed.options;
positional = server.cli.parsed.positionals;

// Gather the test arguments from the options
initArgs = {
	bundles = options[ "test-bundles" ] ?: [],
	directory = {
		mapping : options[ "test-directory" ] ?: "",
		recurse : options[ "test-recurse" ] ?: true
	},
	reporter = options[ "test-reporter" ] ?: DEFAULT_REPORTER,
	labels = options[ "test-labels" ] ?: "",
	excludes = options[ "test-excludes" ] ?: "",
	options = options[ "test-runner-options" ] ?: {}
};

// Deserialize the JSON options
if( isSimpleValue( initArgs.options ) && initArgs.options.len() ) {
	initArgs.options = jsonDeserialize( initArgs.options );
}

// Prepare the run arguments
runArgs = {
	testBundles = options[ "test-filter-bundles" ] ?: [],
	testSuites = options[ "test-filter-suites" ] ?: [],
	testSpecs = options[ "test-filter-specs" ] ?: [],
	eagerFailure = options[ "test-eager-failure" ] ?: false,
	verbose = options[ "test-verbose" ] ?: false
};

// Verbose Listeners
if( runArgs.verbose ){
	runArgs.callbacks = {
		onBundleStart = ( target, testResults ) => {
			println( "> Testing Bundle: #target.$bx.meta.name#" )
		},
		onBundleEnd = ( target, testResults ) => {
			println( "> Bundle Completed: [#target.$bx.meta.name#]" )
			println( "" );
		},
		onSuiteStart = ( target, testResults, suite ) => {
			println( "+ Starting Suite: #suite.name#" )
		},
		onSuiteEnd = ( target, testResults, suite ) => {
			//println( "+ Suite [#suite.name#] completed #suite.toString()#" )
		},
		onSpecStart = ( target, testResults, suite, spec ) => {
			println( "+ Starting Spec/Test: #spec.name#" )
		},
		onSpecEnd = ( target, testResults, suite, spec ) => {
			// println( "+ Spec [#spec.name#] completed #spec.toString()#" )
		},
	}
}

// If we have a positional argument, then we will assume it is a test bundle: Ex: `run my.bundle`
if( positional.len() ) {
	initArgs.bundles = positional[ 1 ];
}

// If we don't have test-bundles or test-directory, then default to the DEFAULT_TEST_DIRECTORY
if( !initArgs.bundles.len() && !initArgs.directory.mapping.len() ) {
	initArgs.directory = DEFAULT_TEST_DIRECTORY;
}

if( runArgs.verbose ){
	startTime = getTickCount();
	println( "Starting TestBox Runner with the following init arguments" );
	println( initArgs );
}

tb = new testbox.system.TestBox( argumentCollection = initArgs )

if( runArgs.verbose ){
	println( "TestBox Runner started in #getTickCount() - startTime# ms" );
	println( "Running your tests with the following run arguments" );
	println( runArgs );
} else{
	println( "Running your tests..." )
}

println( "" )
println( tb.run( argumentCollection = runArgs )  )
